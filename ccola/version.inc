macro(ccola_generate_version_header)
	set(${CCOLA_PROJECT_NAME}_VERSION_STRING "")
	set(${CCOLA_PROJECT_NAME}_VERSION_STRING_FULL "")
	set(${CCOLA_PROJECT_NAME}_VERSION_GIT_SHA)

	if (NOT ${CCOLA_PROJECT_NAME}_VERSION_MAJOR)
		set(${CCOLA_PROJECT_NAME}_VERSION_MAJOR 0)
	endif()

	if (NOT ${CCOLA_PROJECT_NAME}_VERSION_MINOR)
		set(${CCOLA_PROJECT_NAME}_VERSION_MINOR 0)
	endif()

	if (NOT ${CCOLA_PROJECT_NAME}_VERSION_PATCH)
		set(${CCOLA_PROJECT_NAME}_VERSION_PATCH 0)
	endif()

	FIND_PACKAGE(Git)

	if (GIT_FOUND)
		execute_process(COMMAND ${GIT_EXECUTABLE} -C ${PROJECT_SOURCE_DIR} rev-parse --short @{0}
			OUTPUT_VARIABLE ${CCOLA_PROJECT_NAME}_VERSION_GIT_SHA
			OUTPUT_STRIP_TRAILING_WHITESPACE)
	endif()

	set(${CCOLA_PROJECT_NAME}_VERSION_STRING ${${CCOLA_PROJECT_NAME}_VERSION_MAJOR}.${${CCOLA_PROJECT_NAME}_VERSION_MINOR}.${${CCOLA_PROJECT_NAME}_VERSION_PATCH})

	if (${CCOLA_PROJECT_NAME}_VERSION_GIT_SHA)
		set(${CCOLA_PROJECT_NAME}_VERSION_STRING_FULL
			${${CCOLA_PROJECT_NAME}_VERSION_STRING}+${${CCOLA_PROJECT_NAME}_VERSION_GIT_SHA})
	endif()

	string(TIMESTAMP GENERATOR_TIMESTAMP)
	configure_file("${CCOLA_DIR}/Version.h.in" "${PROJECT_SOURCE_DIR}/Version.h")
endmacro()
